service: ${self:custom.service_prefix}-rest

custom:
  domain: ${file(../../globals-${self:provider.stage}.json):DOMAIN}
  service_prefix: ${file(../../globals-${self:provider.stage}.json):SERVICE_PREFIX}
  customDomain:
    rest:
      domainName: api.${self:custom.domain}
      endpointType: 'regional'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  timeout: 30
  environment:
    USER_TABLE: ${self:custom.service_prefix}-user-${self:provider.stage}
    CLASS_TABLE: ${self:custom.service_prefix}-class-${self:provider.stage}
    SESSION_TABLE: ${self:custom.service_prefix}-session-${self:provider.stage}
    SCHEDULE_TABLE: ${self:custom.service_prefix}-schedule-${self:provider.stage}
    IMAGE_BUCKET: ${self:custom.service_prefix}-images-${self:provider.stage}
    CLIENT_ID:  ${file(../../secrets/keys-${self:provider.stage}.json):CLIENT_ID}
    CLIENT_SECRET: ${file(../../secrets/keys-${self:provider.stage}.json):CLIENT_SECRET}
    EMAIL: no-reply@${self:custom.domain}
  iamRoleStatements:
    - Effect: Allow
      Action: 
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.service_prefix}*'
    - Effect: Allow
      Action: s3:putObject
      Resource: 'arn:aws:s3:::${self:provider.environment.IMAGE_BUCKET}*'
    - Effect: Allow
      Action: ses:SendEmail
      Resource: 'arn:aws:ses:${opt:region, self:provider.region}:*:identity/${self:custom.domain}'
      Condition:
        StringEquals:
          ses:FromAddress: '${self:provider.environment.EMAIL}'

plugins:
  - serverless-webpack
  - serverless-domain-manager

functions:
  login:
    handler: handler.login
    events:
      - http:
          path: login
          method: post
          cors: true
  logout:
    handler: handler.logout
    events:
      - http:
          path: logout
          method: post
          cors: true
  createClass:
    handler: handler.createClass
    events:
      - http:
          path: createClass
          method: post
          cors: true
  deleteClass:
    handler: handler.deleteClass
    events:
      - http:
          path: deleteClass
          method: post
          cors: true
  createUpdateClassMembership:
    handler: handler.createUpdateClassMembership
    events:
      - http:
          path: createUpdateClassMembership
          method: post
          cors: true
  createUpdateAdminStatus:
    handler: handler.createUpdateAdminStatus
    events:
      - http:
          path: createUpdateAdminStatus
          method: post
          cors: true
  getAdminInfo:
    handler: handler.getAdminInfo
    events:
      - http:
          path: getAdminInfo
          method: post
          cors: true
  getClassInfo:
    handler: handler.getClassInfo
    events:
      - http:
          path: getClassInfo
          method: post
          cors: true
  getClassAdminInfo:
    handler: handler.getClassAdminInfo
    events:
      - http:
          path: getClassAdminInfo
          method: post
          cors: true
  refreshUserInfo:
    handler: handler.refreshUserInfo
    events:
      - http:
          path: refreshUserInfo
          method: post
          cors: true
  setUserInfo:
    handler: handler.setUserInfo
    events:
      - http:
          path: setUserInfo
          method: post
          cors: true
  setClassName:
    handler: handler.setClassName
    events:
      - http:
          path: setClassName
          method: post
  setRemoteMode:
    handler: handler.setRemoteMode
    events:
      - http:
          path: setRemoteMode
          method: post
  createSession:
    handler: handler.createSession
    events:
      - http:
          path: createSession
          method: post
          cors: true
  closeSession:
    handler: handler.closeSession
    events:
      - http:
          path: closeSession
          method: post
          cors: true
  selfAddClass:
    handler: handler.selfAddClass
    events:
      - http:
          path: selfAddClass
          method: post
          cors: true
  startStopScheduledSessions:
    handler: handler.startStopScheduledSessions
    events:
      - schedule: cron(4/5 * * * ? *)
  addScheduledSession:
    handler: handler.addScheduledSession
    events:
      - http:
          path: addScheduledSession
          method: post
          cors: true
  removeScheduledSession:
    handler: handler.removeScheduledSession
    events:
      - http:
          path: removeScheduledSession
          method: post
          cors: true
  updateScheduledSession:
    handler: handler.updateScheduledSession
    events:
      - http:
          path: updateScheduledSession
          method: post
          cors: true
  getScheduleForClass:
    handler: handler.getScheduleForClass
    events:
      - http:
          path: getScheduleForClass
          method: post
          cors: true
  getDailyImagePostURL:
    handler: handler.getDailyImagePostURL
    events:
      - http:
          path: getDailyImagePostURL
          method: post
          cors: true
  setClassDailyImage:
    handler: handler.setClassDailyImage
    events:
      - http:
          path: setClassDailyImage
          method: post
          cors: true

resources:
  Resources:
    images:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGE_BUCKET}
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: get_by_username
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - id
                - classes
                - fullName
                - hashedPassword
                - admin
                - disableAudioAlerts
              ProjectionType: INCLUDE
          - IndexName: by_username
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - id
                - classes
                - fullName
                - hashedPassword
                - admin
              ProjectionType: INCLUDE
    classes:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CLASS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    sessions:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SESSION_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    scheduledSessions:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SCHEDULE_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: classId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
        - IndexName: by_class_id
          KeySchema:
            - AttributeName: classId
              KeyType: HASH
          Projection:
            ProjectionType: ALL